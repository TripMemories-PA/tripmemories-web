# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js portfolio site

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: npm ci
      - name: lint
        run: npm run lint --if-present
      - name: Test
        run: npm run test --if-present
      - name: Build with Angular
        run: npm run build
      - name: zip artifact all
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: zip all.zip ./* -r
      - name: Upload artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: all
          path: all.zip
          retention-days: 60

  # Deployment job
  Deploy-Preview:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install Vercel CLI
        run: npm i -g vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      #      - name: Add env variables
      #        run: |
      #          echo "${{ env.CLIENT_ID_DEV }}" | vercel env add CLIENT_ID preview --token=${{ secrets.VERCEL_TOKEN }}
      #          echo "${{ env.CLIENT_SECRET_DEV }}" | vercel env add CLIENT_SECRET preview --token=${{ secrets.VERCEL_TOKEN }}
      #          echo "${{ env.NEXT_PUBLIC_API_URL }}" | vercel env add NEXT_PUBLIC_API_URL --token=${{ secrets.VERCEL_TOKEN }}
      #          echo "${{ env.NEXT_PUBLIC_TOKEN_DRIBBLE_DEV }}" | vercel env add NEXT_PUBLIC_TOKEN_DRIBBLE preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  Deploy-Production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install Vercel CLI
        run: npm i -g vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      #      - name: Add env variables
      #        run: |
      #          echo "${{ env.CLIENT_ID }}" | vercel env add CLIENT_ID production --token=${{ secrets.VERCEL_TOKEN }}
      #          echo "${{ env.CLIENT_SECRET }}" | vercel env add CLIENT_SECRET production --token=${{ secrets.VERCEL_TOKEN }}
      #          echo "${{ env.NEXT_PUBLIC_API_URL }}" | vercel env add NEXT_PUBLIC_API_URL --token=${{ secrets.VERCEL_TOKEN }}
      #          echo "${{ env.NEXT_PUBLIC_TOKEN_DRIBBLE }}" | vercel env add NEXT_PUBLIC_TOKEN_DRIBBLE production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
